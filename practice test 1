1..Reverse a string without using built in functions

//pseudocode

pseudofunctions:

function stringReversal(string -> char) -> char
    for (i = 0...length / 2)
        temp = string[i]
        string[i] = string[length - i -1]
        string[length - i -1] = temp

function stringReversalTest()
    input string
    stringReversal(string)
    print string

pseudocode:

stringReversalTest()


//c++ code

#include <iostream>
#include <cstring>
using std::cout;
using std::cin;

void stringReversal(char string[])
{
    int length = strlen(string);

    for (int i = 0 ; i < length / 2 ; i++)
    {
        char temp = string[i];
        string[i] = string[length - i - 1];
        string[length - i - 1] = temp;
    }
}

void stringReversalTest(void)
{
    char string[20];

    cout << "Enter a string: ";
    cin >> string;

    stringReversal(string);
    cout << "After reversing: " << string;
}

int main(void)
{
    stringReversalTest();
    
    return 0;
}

...............................................

2..Write a program that continuously prompts the user to enter a number. The program should add the entered number to the previous valid number if it is divisible by 3 or 5 and display the sum. If the number is not divisible by 3 or 5, display a message indicating this. The program should terminate when the user types any particular character. Additionally, handle invalid input by prompting the user to enter a valid number.

//pseudocode

pseudof unctions:

function isDivisibleBy3Or5(number -> int) -> bool
    return (number % 3 == 0 || number % 5 == 0)

function getNumberFromUser(number -> int) -> bool

    input number
    if (invalid input)
        return true
    return false

function getNumberFromUserTest()

    sum = 0
    while (true)
        if (!getNumberFromUser(number))
            terminate program
        if (isDivisibleBy3Or5(number))
            sum = sum + number
            print sum
        else
            print not divisible by 3 or 5

pseudo code:

getNumberFromUserTest()


//c++ code

#include <iostream>

using std::cin;
using std::cout;
using std::endl;

bool isDivisibleBy3Or5(int number) 
{
    return (number % 3 == 0 || number % 5 == 0);
}

bool getNumberFromUser(int &number) 
{
    cout << "Enter a number: ";
    
    if (cin >> number) 
    {
        return true; 
    } 
    else 
    {
        return false;  
    }
}

void getNumberFromUserTest(void) 
{
    int number;
    int sum = 0;
    
    while (true)
    {
        if (!getNumberFromUser(number))
        {
            cout << "Terminating the program." << endl;
            break;
        }
        
        if (isDivisibleBy3Or5(number))
        {
            sum = sum + number; 
            cout << "The number " << number << " is divisible by 3 or 5." << endl;
            cout << "Current sum: " << sum << endl;
        }
        else 
        {
            cout << "The number " << number << " is not divisible by 3 or 5." << endl;
        }
        
    }   

}

int main() 
{
    getNumberFromUserTest();
    
    return 0;
}

....................................................

3..1. Write a program to read 10 numbers from the user, find their sum. [with array]
2. Write a program to read 10 numbers from the user, find their sum [without using array]

1. //psudo code

pseudo function:

function findSum(number -> int, arr[] -> int) -> int
    sum = 0
    for (i = 0...number)
        sum = sum + arr[i]
    return sum

function findSumTest()
    input number, arr[10]
    if (number > 10)
        print invalid
    result = findSum(number, arr)
    print result

pseudo code:

findSumTest()

//c++ code

#include <iostream>
using std::cout;
using std::cin;

int findSum(int number, int arr[])
{
    int sum = 0;
    
    for (int i = 0 ; i < number ; i++)
    {
        sum = sum + arr[i];
    }
    
    return sum;
}

void findSumTest(void)
{
    int number, arr[10];
    
    cout << "Enter number of elements: ";
    cin >> number;
    
    if (number <= 0 || number > 10)
    {
        cout << "Invalid";
        return;
    }

    cout << "Enter " << number << " numbers: ";
    for (int i = 0 ; i < number ; i++)
    {
        cin >> arr[i];
    }
    
    int result = findSum(number, arr);
    cout << "Sum of numbers: " << result;
}

int main(void)
{
    findSumTest();
    
    return 0;
}


2. //pseudocode

pseudo function:

function findSum(number -> int) -> int
    sum = 0
    for (i...number)
        input numbers
        sum = sum + input
    return sum

function findSumTest()
    input number
    if (number > 10)
        print invalid
    result = findSum(number)
    print result

pseudo code:

findSumTest()


//c++ code

#include <iostream>
using std::cout;
using std::cin;

int findSum(int number)
{
    int sum = 0, input;

    cout << "Enter " << number << " numbers: ";
    for (int i = 0 ; i < number ; i++)
    {
        cin >> input;
        sum = sum + input;
    }
    
    return sum;
}

void findSumTest(void)
{
    int number;
    
    cout << "Enter number of elements: ";
    cin >> number;
    
    if (number <= 0 || number > 10)
    {
        cout << "Invalid";
        return;
    }

    int result = findSum(number);
    cout << "Sum of numbers: " << result;
}

int main(void)
{
    findSumTest();
    
    return 0;
}

......................................................

4..Write a program to find the highest number from 10 numbers.
(user should input numbers)
The highest number should be returned from a function.

Write pseudocode and c++ code. And test with different test cases.

//pseudocode

pseudo function:

function findHighestNumber(number -> int, arr[] -> int) -> int
    highest = arr[0]
    for (i = 0...number)
        if (arr[i] > highest
            highest = arr[i]
    return highest

function findHighestNumberTest()
    input number, arr[10]
    if (number > 10)
        print invalid
    result = findHighestNumber(number, arr)
    print result

//c++ code

#include <iostream>
using std::cout;
using std::cin;

int findHighestNumber(int number, int arr[])
{
    int highest = arr[0];
    
    for (int i = 0 ; i < number ; i++)
    {
        if (arr[i] > highest)
        {
            highest = arr[i];
        }
    }
    
    return highest;
}

void findHighestNumberTest(void)
{
    int number, arr[10];
    
    cout << "Enter number of elements: ";
    cin >> number;
    
    if (number < 0 || number > 10)
    {
        cout << "Invalid";
        return;
    }

    cout << "Enter numbers: ";
    for (int i = 0 ; i < number ; i++)
    {
        cin >> arr[i];   }
    
    int result = findHighestNumber(number, arr);
    cout << "Highest number is: " << result;
}

int main(void)
{
    findHighestNumberTest();
    
    return 0;
}


//output

Enter number of elements: 10
Enter numbers: 5 12 20 30 45 60 25 10 50 75
Highest number is: 75
